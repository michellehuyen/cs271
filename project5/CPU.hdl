// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in = instruction[15], out = aInst);
    Mux16(a = ALUout, b = instruction, sel = aInst, out = instMuxALU);

    Or(a = aInst, b = instruction[5], out = intoAReg);
    ARegister(in = instMuxALU, load = intoAReg, out = ARegOut, out[0..14] = addressM);

    Mux16(a = ARegOut, b = inM, sel = instruction[12], out = intoALU);

    DRegister(in = ALUout, load = instruction[4], out = DRegOut);
    
    ALU(x = DRegOut, y = intoALU, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = ALUout, out = outM, zr = zrOut, ng = ngOut);
    And(a = instruction[15], b = instruction[3], out = writeM);

    And(a = instruction[1], b = zrOut, out = j1Andzr);
    And(a = instruction[2], b = ngOut, out = j2Andng);

    Not(in = zrOut, out = notZr);
    Not(in = ngOut, out = notNg);
    And(a = notZr, b = notNg, out = zrNgNot);
    And(a = zrNgNot, b = instruction[0], out = j0AndNotZN);

    And(a = instruction[1], b = instruction[2], out = j1Andj2);
    And(a = j1Andj2, b = instruction[0], out = j1Andj2Andj3);
    
    Or(a = j1Andzr, b = j2Andng, out = j1Zorj2N);
    Or(a = j1Zorj2N, b = j0AndNotZN, out = j1Zorj2Norj3NotZN);
    Or(a = j1Zorj2Norj3NotZN, b = j1Andj2Andj3, out = ld1);

    And(a = instruction[15], b = ld1, out = ld);
    Not(in = ld, out = incr);
    
    PC(in = ARegOut, load = ld, inc = incr, reset = reset, out[0..14] = pc);
}